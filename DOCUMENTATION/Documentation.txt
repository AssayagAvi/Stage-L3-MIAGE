

                                        GIT HUB : Fonctionnement et Généralités 

Github est un service d'hebergement web (un peu comme une sorte de Drive) et de gestion de developpement de logiciel lancé en 2008.
Ce dernier est codé principalement en "Ruby" et "Erlang" par different programmeurs : Chris Wanstrath, PJ Hyett et Tom Preston-Werner.

Aujourd'hui cette plateforme compte plus de 15 millions d'utilisateur et enregistre environ 40 millions de dépôts de fichiers,
se placant donc en tete du plus grand hebergeur "source code"mondial.

Le fonctionnement de Git est assez simple, on creer un repertoire (un referentiel / requisitory) dans lequel on va stocker tout les fichiers
que l'on désire et on peut soit rendre l'acces publique (au quel cas tout le monde peut rejoindre et consulter ces fichiers) ou alors le 
restreindre en accés privé (au quel cas c'est le créateur qui décide quels seront les collaborateurs ayant droit de consultation des fichiers).
Ensuite cela s'agit comme une "sorte de réseau" constitué de branches (branch) où chaque braches represente un collaborateur aisni que la 
"master" qui correspond au créateur du referentiel.

Une des caractéristques de Git repose sur le fait que c'est un outil de verisonning (gestion de version) est donc permet de si le fichier
à été modifié; si oui par qui et quand a eu lieu la modification et quel fichiers ont été affectés. Cela permet notamment de pouvoir faire
des travails de groupe sur le meme sujet (un site ou une application par exemeple) où chacun doit travaillé sa partie mais nécesite les parties 
des autres membres du groupes (mis a jours en régulierement). 

Evidemment toutes les etapes (initialisation, dépôts, fusion et clonage) se font a l'aide de lignes de commandes sur le terminal (en bash)
que j'expliquerai un peu plus loin ainsi que les commandes principales pour chaques étapes.

a) Initialisation
    Pour creer un projet il suffit d'aller sur le site  https://github.com/ puis Repositories --> New et remplir les informations données avant
de valider. Ensuite pour initialiser le Git (et que la branch master existe; elle sera crée automatiquement a l'instanciantion du projet) il 
faut se placer dans le dossier (en ligne de commande "cd") et tappez : " git init "
Ensuite  il faudra tapper : " git remote add origin < lien donnée par git hub > " puis " git push –u origin master " qui respectivement creerons
le repertoire du projet et ensuite la zone de dépôt.

b) Branches
    Comme nous l'avons dit plus haut le projet est contenu dans la branche principale la "master" et grace à des copies de branches le projet 
acquiert une plus grande fléxibilté qui permet d'incrementer au fur et mesure le projet. 
    Pour ajouter une branche il suffira simplement de tapper " git branch < nom de la branche > " et pour supprimer une branche il faut rajouter
l'option "-d" a la commande soit : " git branch -d < nom de la branche > ".
    Pour changer de branche (afin d'effectuer un dépôt ou autre) il faudra tapper : " git checkout < nom de la branche > "  et enfin pour visiualiser
l'ensemble des branches existantes on devra tapper : " git branch ".

c) Dépôts et mise a jours
    Avant toute chose il faut savoir sur quelle branche déposer le fichier puis il faudra tapper les commmandes suivantes pour les ajouter 
au fichier : " git add < nom des fichier > " (ou * pour tout ajouter)" puis " git commit -m "message" " et enfin pour finir 
" git push origin < nom de la branche> ". Pour recuperer des modifications faites sur le projet il sufir a l'inverse de tapper : 
" git pull origin master ".

d) Clonage
    Une fois les autres branches (celles des differents collaborateurs) crées il faut juste qu'il copie le lien du git pour pouvoir 
travailler dessus et effectuer les futurs dépôts. En premier lieu il faudra tapper : " git clone < lien du git > " puis effectuer la commande
" git pull origin master " pour reccuper les fichiers de la branche "master" et enfin faires les commandes relatives au dépôt (vu plus haut)


En résumé les commandes principales de Github sont : 
" git init "
" git remote add "
" git clone "
" git checkout "
" git branch < branche > "  " git branch -d < branche > "
" git add < fichier > "     " git add * "
" git commit -m "..." "
" git push origin master "   " git push origin < brnache > "
" git pull origin master "   " git pull origin < master > "
" git merge "
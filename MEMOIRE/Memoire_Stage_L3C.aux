\relax 
\providecommand\hyper@newdestlabel[2]{}
\catcode `:\active 
\catcode `;\active 
\catcode `!\active 
\catcode `?\active 
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\babel@aux{french}{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Environnement Utilis\IeC {\'e}s}{3}{section.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Durant ce stage, dans le but d'impl\IeC {\'e}menter des algorithmes pour mod\IeC {\`e}les de jeu stochastiques nous allons utiliser divers outils (environnements) et langages informatiques. Parmi eux se trouvent le langage Python, la plateforme GitHub ainsi que le solveur Gurobi que nous utiliserons pour la programmation lin\IeC {\'e}aire et le python orient\IeC {\'e} objet.}{3}{section*.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Python}{3}{subsection.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Python est un langage de programmation \IeC {\`a} part enti\IeC {\`e}re dont la premi\IeC {\`e}re version fut d\IeC {\'e}veloppe par \textit  {Guido van Rossum} et lanc\IeC {\'e} en 1991. Ce langage est facile d'utilisation et ne poss\IeC {\`e}de pas forc\IeC {\'e}ment de syntaxe particuli\IeC {\`e}res seulement une indentation permettant au compilateur int\IeC {\'e}gr\IeC {\'e} de suivre les blocs d'instructions.}{3}{section*.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Ce langage permet donc une multitude de possibilit\IeC {\'e} de code mais aussi d'action puisqu'il existe des biblioth\IeC {\`e}ques d\IeC {\'e}j\IeC {\`a} impl\IeC {\'e}ment\IeC {\'e}s et il suffira seulement des les utiliser comme bon nous le semble (par exemple Matplotlib ou encore Networkx etc...). Malheureusement Python n'est pas le langage le plus rapide d'ex\IeC {\'e}cution contrairement au C ou C++ et Java mais il permet tout de m\IeC {\^e}me d'acc\IeC {\'e}der \IeC {\`a} des fonctionnalit\IeC {\'e}s que d'autres langages ne peuvent proposer.}{3}{section*.4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Contrairement au C, Python admets des types sophistiqu\IeC {\'e}s suppl\IeC {\'e}mentaires tel que les \textit  {Listes}, les \textit  {Dictionnaires}, les \textit  {Sets} et les \textit  {Tuples}. Il en va de soit que les types primitifs sont aussi pr\IeC {\'e}sent \textit  {int,float,double,boolean etc..}. Mais le r\IeC {\'e}el avantage du langage repose sur le fait que l'on ne se soucie pas du type de retour d'une fonction ni de la d\IeC {\'e}claration du type du param\IeC {\`e}tre ainsi que le langage admet la possibilit\IeC {\'e} d'\IeC {\^e}tre orient\IeC {\'e} objet.}{3}{section*.5}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Python est un langage interpr\IeC {\'e}t\IeC {\'e} et donc n'a pas besoin de passer pas un compilateur comme GCC (GNU Complier Collection), tout se fait directement sur la console une fois l'environnement install\IeC {\'e}.}{3}{section*.6}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Quant \IeC {\`a} l'installation de Python, cette derni\IeC {\`e}re est assez simple; il suffit d'aller sur le site officiel et t\IeC {\'e}l\IeC {\'e}charger la version en question (aujourd'hui version 3.8.2) et ensuite de l'installer. Il existe diff\IeC {\'e}rentes m\IeC {\'e}thodes d'activation du langage, qui repr\IeC {\'e}sente chacune l'environnement de la machine (Windows, Mac OS ou encore Linux).}{3}{section*.7}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{A savoir que sur Mac Os et Linux, Python est d\IeC {\'e}j\IeC {\`a} pr\IeC {\'e}install\IeC {\'e} et il faudra peut \IeC {\^e}tre seulement mettre \IeC {\`a} jours la version qui pourrai \IeC {\^e}tre obsol\IeC {\`e}te ou d\IeC {\'e}pass\IeC {\'e}.}{3}{section*.8}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.1}Installation sous forme de Packages}{3}{subsubsection.1.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour cela il faut allez t\IeC {\'e}l\IeC {\'e}charger les packages en question sur le site officiel de Python puis les interpr\IeC {\'e}ter c'est dire ouvrir la console (terminal python) et demander \IeC {\`a} python d'ex\IeC {\'e}cuter le fichier \textit  {.py} en question via la commande :}{4}{section*.9}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.2}Installation via le module Pip}{4}{subsubsection.1.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Il s'agit d'une des m\IeC {\'e}thodes les plus simple, apr\IeC {\`e}s avoir t\IeC {\'e}l\IeC {\'e}charg\IeC {\'e} les packages Python sur le site, on installe tout les modules externes (pip , Django etc ...) que l'on pourrai avoir besoin d'utiliser par la suite via le terminal : }{4}{section*.10}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.3}Un petit code Python}{4}{subsubsection.1.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Rien de mieux qu'un petit code Python pour mieux comprendre la syntaxe et la facilit\IeC {\'e} d'utilisation du langage. Voici donc une fonction \textit  {Puissance r\IeC {\'e}curssive} et une fonction \textit  {Tri \IeC {\`a} bulles} :}{4}{section*.11}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}GitHub}{4}{subsection.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Github est un service d'h\IeC {\'e}bergement web (un peu comme une sorte de Drive) et de gestion de d\IeC {\'e}veloppement de logiciel lanc\IeC {\'e} en 2008. Ce dernier est cod\IeC {\'e} principalement en Ruby et Erlang par diff\IeC {\'e}rents programmeurs : Chris Wanstrath, PJ Hyett et Tom Preston-Werner.}{4}{section*.12}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Aujourd'hui cette plateforme compte plus de 15 millions d'utilisateurs et enregistre environ 40 millions de d\IeC {\'e}p\IeC {\^o}ts de fichiers, se pla\IeC {\c c}ant donc en t\IeC {\^e}te du plus grand h\IeC {\'e}bergeur source code mondial.}{4}{section*.13}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Le fonctionnement de Git est assez simple, on cr\IeC {\'e}er un r\IeC {\'e}pertoire (un r\IeC {\'e}f\IeC {\'e}rentiel / requisitory) dans lequel on va stocker tout les fichiers que l'on d\IeC {\'e}sire et on peut soit rendre l'acc\IeC {\`e}s publique (au quel cas tout le monde peut rejoindre et consulter ces fichiers) ou alors le restreindre en acc\IeC {\`e}s priv\IeC {\'e} (au quel cas c'est le cr\IeC {\'e}ateur qui d\IeC {\'e}cide quels seront les collaborateurs ayant droit de consultation des fichiers). Ensuite cela s'agit comme une sorte de r\IeC {\'e}seau constitu\IeC {\'e} de branches (branch) o\IeC {\`u} chaque branches repr\IeC {\'e}sentent un collaborateur ainsi que la master qui correspond au cr\IeC {\'e}ateur du r\IeC {\'e}f\IeC {\'e}rentiel.}{5}{section*.14}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Une des caract\IeC {\'e}ristiques de Git repose sur le fait que c'est un outil de verisonning (gestion de version) est donc permet de si le fichier \IeC {\`a} \IeC {\'e}t\IeC {\'e} modifi\IeC {\'e}; si oui par qui et quand a eu lieu la modification et quel fichiers ont \IeC {\'e}t\IeC {\'e} affect\IeC {\'e}s. Cela permet notamment de pouvoir faire des travails de groupe sur le m\IeC {\^e}me sujet (un site ou une application par exemple) o\IeC {\`u} chacun doit travaill\IeC {\'e} sa partie mais n\IeC {\'e}cessite les parties des autres membres du groupes (mis \IeC {\`a} jours r\IeC {\'e}guli\IeC {\`e}rement). }{5}{section*.15}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{\IeC {\'E}videmment toutes les \IeC {\'e}tapes (initialisation, d\IeC {\'e}p\IeC {\^o}ts, fusion et clonage) se font a l'aide de lignes de commandes sur le terminal (en bash) que j'expliquerai un peu plus loin ainsi que les commandes principales pour chaque \IeC {\'e}tapes.}{5}{section*.16}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.1}Initialisation}{5}{subsubsection.1.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Ensuite il faudra taper : git remote add origin < lien donn\IeC {\'e}e par git hub > puis git push \IeC {\textendash }u origin master qui respectivement cr\IeC {\'e}erons le r\IeC {\'e}pertoire du projet et ensuite la zone de d\IeC {\'e}p\IeC {\^o}t.}{5}{section*.18}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.2}Branches}{5}{subsubsection.1.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Comme nous l'avons dit plus haut le projet est contenu dans la branche principale la master et gr\IeC {\^a}ce \IeC {\`a} des copies de branches le projet acquiert une plus grande flexibilit\IeC {\'e} qui permet d'incr\IeC {\'e}menter au fur et mesure le projet.}{5}{section*.19}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour ajouter une branche il suffira simplement de taper git branch < nom de la branche > et pour supprimer une branche il faut rajouter l'option -d a la commande soit : git branch -d < nom de la branche >.}{5}{section*.20}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Pour changer de branche (afin d'effectuer un d\IeC {\'e}p\IeC {\^o}t ou autre) il faudra taper : git checkout < nom de la branche > et enfin pour visualiser l'ensemble des branches existantes on devra taper : git branch .}{5}{section*.21}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.3}D\IeC {\'e}p\IeC {\^o}t et mises \IeC {\`a} jours}{5}{subsubsection.1.2.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Avant toute chose il faut savoir sur quelle branche d\IeC {\'e}poser le fichier puis il faudra taper les commandes suivantes pour les ajouter au fichier : git add < nom des fichier > (ou * pour tout ajouter) puis git commit -m message et enfin pour finir git push origin < nom de la branche>.}{5}{section*.22}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour r\IeC {\'e}cup\IeC {\'e}rer des modifications faites sur le projet il suffit \IeC {\`a} l'inverse de taper : git pull origin master.}{6}{section*.23}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.4}Clonage}{6}{subsubsection.1.2.4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Une fois les autres branches (celles des diff\IeC {\'e}rents collaborateurs) cr\IeC {\'e}es il faut juste qu'il copie le lien du git pour pouvoir travailler dessus et effectuer les futurs d\IeC {\'e}p\IeC {\^o}ts. En premier lieu il faudra taper : git clone < lien du git > puis effectuer la commande git pull origin master pour r\IeC {\'e}cup\IeC {\'e}rer les fichiers de la branche master et enfin faire les commandes relatives au d\IeC {\'e}p\IeC {\^o}t (vu plus haut).}{6}{section*.24}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}Gurobi}{6}{subsection.1.3}\protected@file@percent }
\bibcite{Python}{Python}
\bibcite{RO}{Th\IeC {\'e}orie des Jeux}
\bibcite{RO}{Th\IeC {\'e}orie des Jeux}
\bibcite{RO}{Th\IeC {\'e}orie des Jeux}
\@writefile{toc}{\contentsline {section}{\numberline {2}Webographie}{7}{section.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3}Annexes}{8}{section.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Python}{8}{subsection.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.1.1}Syntaxe}{8}{subsubsection.3.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ La syntaxe est assez similaire aux autre langage puisque python utilise les m\IeC {\^e}mes types de variables, sauf les types sophistiqu\IeC {\'e}s. A la diff\IeC {\'e}rence des autres langages de programmation (C,,C++,Java,php) la fin d'une instruction se termine par un caract\IeC {\`e}re vide et non ; , avec python c'est l'indentation qui fait office d'instruction et donc de bloc de code.}{8}{section*.26}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Nous avons d\IeC {\'e}j\IeC {\`a} vu plus haut la syntaxe des types dit sophistiqu\IeC {\'e}s donc je ne m'attarderai pas plus dessus, et nous allons donc voir la syntaxe des structures conditionnels (If / Else / Elif) et celle des boucles (For / While).}{8}{section*.27}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{A) Structure Conditionelle If : \newline  La condition est suivi par : puis vient ensuite l'instruction \IeC {\`a} effectuer, si le test est v\IeC {\'e}rifi\IeC {\'e}, qu'il faudra indenter (d'un cran).}{8}{section*.28}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{B) Structure Conditionelle Else : \newline  La condition est suivi par : puis vient ensuite l'instruction \IeC {\`a} effectuer, si le premier test n'est pas v\IeC {\'e}rifi\IeC {\'e}, qu'il faudra indenter (d'un cran) au m\IeC {\^e}me niveau que le test If.}{8}{section*.29}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{C) Structure Conditionelle Else : \newline  La condition est suivi par : puis vient ensuite l'instruction \IeC {\`a} effectuer, si le premier test n'est pas v\IeC {\'e}rifi\IeC {\'e}, qu'il faudra indenter (d'un cran) au m\IeC {\^e}me niveau que le test If.}{8}{section*.30}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{D) Boucle For : \newline  La structure est compos\IeC {\'e} de for puis de deux valeurs \IeC {\'e}l\IeC {\'e}ment et sequence qui permette de suivre l'it\IeC {\'e}ration \IeC {\`a} effectuer. Le bloc est ex\IeC {\'e}cut\IeC {\'e} autant de fois de qu'il y a d' \IeC {\'e}l\IeC {\'e}ments dans la sequence et se termine par : .}{8}{section*.31}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{E) Boucle While : \newline  La structure est compos\IeC {\'e} de while puis de la condition qui permet d'effectuer un test. Le bloc est ex\IeC {\'e}cut\IeC {\'e} tant que la condition est v\IeC {\'e}rifi\IeC {\'e} et se termine par : }{9}{section*.32}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{F) Les fonctions : \newline  Quant au fonction la d\IeC {\'e}finition se fait de mani\IeC {\`e}re tr\IeC {\`e}s simple il suffit d'utiliser le mot cl\IeC {\'e} def et cela est terminer, en python on ne prend pas en compte le type de retour d'une fonction comme en C, C++ ou en Java (int, void, double, float etc ...).}{9}{section*.33}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.1.2}Orient\IeC {\'e} Objet (POO}{9}{subsubsection.3.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Comme nous l'avons expliqu\IeC {\'e} un peu plus haut les langages de programmation peuvent avoir deux voies statiques comme le C et Python par exemple ou alors orient\IeC {\'e} objet comme le Java, C++ ainsi que le Python.}{9}{section*.34}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Les objectifs principaux de la programmation orient\IeC {\'e}e objet sont de nous permettre de cr\IeC {\'e}er des scripts plus clairs, mieux structur\IeC {\'e}s, plus modulables et plus faciles \IeC {\`a} maintenir.}{9}{section*.35}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{L'orient\IeC {\'e} objet (comme dans tout langage) repose sur quatre grandes notions :}{9}{section*.36}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{A) Le concept orient\IeC {\'e} objet \newline  En POO (programmation orient\IeC {\'e} objet) nous allons concevoir notre programme (script) non pas comme plusieurs fonction ayant un but compl\IeC {\'e}mentaire mais plut\IeC {\^o}t comme un ensemble d'objet (d\IeC {\'e}finit via des classes) interagissant les uns avec les autres. Un objet est un concept qui repr\IeC {\'e}sente un ensemble de donn\IeC {\'e}es et qui en contr\IeC {\^o}le l'acc\IeC {\`e}s o\IeC {\`u} chaque objet a un comportement propre. Au sein d'un objets on y retrouve les membres qui le compose : ses attributs (structures de donn\IeC {\'e}es d\IeC {\'e}finies dans l'objet) et ses m\IeC {\'e}thodes (proc\IeC {\'e}dures et fonctions d\IeC {\'e}finies dans l'objet).}{9}{section*.37}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Ainsi pour r\IeC {\'e}pondre au besoin d'abstraction d'objet apparait une nouvelle notion celle des classes, c'est une structure (un model) dans laquelle on d\IeC {\'e}clare l'ensemble des membres (attributs et m\IeC {\'e}thodes) de l'objet en question. La deuxi\IeC {\`e}me notion qui apparait alors est donc la cr\IeC {\'e}ation / construction de cet objet; nous utilisons donc un constructeur (et respectivement un destructeur). Ainsi le constructeur permet de cr\IeC {\'e}er des instances dont les caract\IeC {\'e}ristiques (les membres) sont d\IeC {\'e}cris par la classe.}{10}{section*.38}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{B) L'encapsultaion\newline  Ce concept d\IeC {\'e}signe le fait de dissimuler certaines informations contenue dans un objet et de proposer (\IeC {\`a} l'utilisateur) la modification que de certains membres. Il faudra sp\IeC {\'e}cifier des membres publiques (visible de l'objet) et priv\IeC {\'e}s (non visible de l'objet).}{10}{section*.39}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{C) Le polymorphisme \newline  Ce concept permet de red\IeC {\'e}finir (le nom et corps) une m\IeC {\'e}thode au sein d'une classe et donc de la sp\IeC {\'e}cifier. Mais aussi la possibilit\IeC {\'e} de d\IeC {\'e}finir des comportements diff\IeC {\'e}rents pour la m\IeC {\^e}me m\IeC {\'e}thode selon les arguments donn\IeC {\'e}s en param\IeC {\`e}tres. Pour r\IeC {\'e}sumer, le polymorphisme est un concept qui fait r\IeC {\'e}f\IeC {\'e}rence \IeC {\`a} la capacit\IeC {\'e} d\IeC {\textquoteright }une variable, d\IeC {\textquoteright }une fonction ou d\IeC {\textquoteright }un objet \IeC {\`a} prendre plusieurs formes, c\IeC {\textquoteright }est-\IeC {\`a}-dire \IeC {\`a} sa capacit\IeC {\'e} de poss\IeC {\'e}der plusieurs d\IeC {\'e}finitions diff\IeC {\'e}rentes.}{10}{section*.40}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{D) L'h\IeC {\'e}ritage Ce concept permet \IeC {\`a} une classe d'h\IeC {\'e}riter (des membres donc des attributs et des m\IeC {\'e}thodes) d'une autre. On parlera alors de la classe m\IeC {\`e}re (celle dont on h\IeC {\'e}rite) et des classes filles (celles qui h\IeC {\'e}ritent). Ce n'est pas un principe unitaire il peut s'appliquer plusieurs fois et suivre un sch\IeC {\'e}ma on parlera alors d'h\IeC {\'e}ritage multiple. }{10}{section*.41}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Le POO en Python}{10}{subsection.3.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Python est un langage r\IeC {\'e}solument orient\IeC {\'e} objet, ce qui signifie que le langage tout entier est construit autour de la notion d\IeC {\textquoteright }objets. Quasiment tous les types du langage String / Integer / Listes / Dictionnaires sont avant tout des objets tout comme les fonctions qui elles aussi sont des objets.}{10}{section*.42}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Pour cr\IeC {\'e}er une classe , donc un Objet il suffit d'utilise le mot cl\IeC {\'e} class suivit de : et ne pas oublier l'indentation.}{10}{section*.43}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Ensuite il faudra d\IeC {\'e}finir un constructeur qui permettra d'instancier les objets dont nous auront besoins, il faut donc utiliser la m\IeC {\'e}thode \textit  {init} au sein de la classe sans oublier le param\IeC {\`e}tre obligatoire (mot cl\IeC {\'e} de python) self. }{10}{section*.44}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Expliquons un peu le mot cl\IeC {\'e} self qui est toujours pr\IeC {\'e}sent soir dans une fonction soit dans une d\IeC {\'e}finition de classe. Ainsi les fonctions d\IeC {\textquoteright }une classe ne font pas exception : ce sont \IeC {\'e}galement objets. C'est donc pour cela que la fonction poss\IeC {\'e}dera toujours un param\IeC {\`e}tre de plus,le fameux self. Si l'on d\IeC {\'e}fini une classe vide c'est a dire ou pour le moment il n'y aucune action \IeC {\`a} effectuer il faut rajouter le mot cl\IeC {\'e} pass}{11}{section*.45}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Comme nous l'avons \IeC {\'e}galement vu ont une classe m\IeC {\`e}re peut h\IeC {\'e}rit\IeC {\'e} d'une autre et donc de ses attributs et de ses m\IeC {\'e}thodes. la syntaxe est simple, il suffit de mettre en paranth\IeC {\'e}se la classe m\IeC {\`e}re au moment de la d\IeC {\'e}claration de la classe fille. Voici un exemple avec < NomClasse > et < NomClasse2>}{11}{section*.46}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ A ce niveau on peut se demander comment Python g\IeC {\'e}re ces h\IeC {\'e}ritages. Lorsqu\IeC {\textquoteright }on tente d\IeC {\textquoteright }afficher le contenu d\IeC {\textquoteright }un attribut de donn\IeC {\'e}es ou d\IeC {\textquoteright }appeler une m\IeC {\'e}thode depuis un objet, Python va commencer par chercher si la variable ou la fonction correspondantes se trouvent dans la classe qui a cr\IeC {\'e}\IeC {\'e} l\IeC {\textquoteright }objet.}{11}{section*.47}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Si c\IeC {\textquoteright }est le cas, il va les utiliser. Si ce n\IeC {\textquoteright }est pas le cas, il va chercher dans la classe m\IeC {\`e}re de la classe de l\IeC {\textquoteright }objet si cette classe poss\IeC {\`e}de une classe m\IeC {\`e}re. Si il trouve ce qu\IeC {\textquoteright }il cherche, il utilisera cette variable ou fonction.}{11}{section*.48}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Si il ne trouve pas, il cherchera dans la classe m\IeC {\`e}re de la classe m\IeC {\`e}re si elle existe et ainsi de suite. Deux fonctions existent pour savoir si l'objet est seulemnent une instance d'une classe et pour savoir si la classe en question a eu recourt \IeC {\`a} de l'h\IeC {\'e}riatge : isinstance() et issubclass(). }{11}{section*.49}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}GitHub}{12}{subsection.3.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}Gurobi}{12}{subsection.3.4}\protected@file@percent }

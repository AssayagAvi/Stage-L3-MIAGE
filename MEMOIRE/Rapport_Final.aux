\relax 
\providecommand\hyper@newdestlabel[2]{}
\catcode `:\active 
\catcode `;\active 
\catcode `!\active 
\catcode `?\active 
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\babel@aux{french}{}
\@writefile{toc}{\contentsline {paragraph}{Merci \IeC {\`a} Monsieur Hyon, maitre de conf\IeC {\'e}rence \IeC {\`a} l'Universit\IeC {\'e} de Nanterre et chercheur dans l'equipe SYSDEF du Lip6 , d'avoir accepter le poste de tuteur pour mon stage de Licence 3 MIAGE. Gr\IeC {\^a}ce a son accompagnement personnel j'ai pu solidifier mes comp\IeC {\'e}tences algorithmiques (Java et Python) mais aussi d\IeC {\'e}couvert d'autre aspect de la programmation lin\IeC {\'e}aire. }{2}{section*.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Cette opportunit\IeC {\'e} n'a \IeC {\'e}t\IeC {\'e} seulement possible que par la collaboration de Monsieur Emmanuel Hyon, mon tuteur ainsi que Monsieur Fran\IeC {\c c}ois Delbot, responsable de la Licence 3, et les remercie de leur patience , de leur encouragement et de le encadrement tout au long de ce stage. }{2}{section*.3}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{5}{section.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pendant ces semaines de stage, nous allons essayez d'impl\IeC {\'e}menter des algorithmes pour r\IeC {\'e}soudre des mod\IeC {\`e}les de jeux stochastiques, plus pr\IeC {\'e}cis\IeC {\'e}ment des jeux de gain \IeC {\`a} somme nul (que nous repr\IeC {\'e}senterons sous forme bimatricel).}{5}{section*.5}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{L'objectif est dans un premier temps de concevoir une mod\IeC {\'e}lisation informatique de ces jeux puis dans un second temps impl\IeC {\'e}menter un ou des algorithmes permettant de r\IeC {\'e}soudre ces jeux.}{5}{section*.6}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour parfaire \IeC {\`a} ces attentes, nous allons utilis\IeC {\'e} le langage \textit  {Python}, non utilis\IeC {\'e} durant le cursus scolaire actuel, le solveur \textit  {Gurobi}, que nous utiliserons afin de r\IeC {\'e}soudre des programmes lin\IeC {\'e}aires et pour l'orient\IeC {\'e} objet \textit  {Python} et la plateforme \textit  {GitHub}, l'h\IeC {\'e}bergeur de code, pour avoir acc\IeC {\`e}s a tout les codes sources, document qui m'ont aid\IeC {\'e} a r\IeC {\'e}aliser ce stage.}{5}{section*.7}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{L'utilisation de GitHub n'\IeC {\'e}tait pas obligatoire, mais elle plus que judicieuse pour que mon tuteur \relax $\@@underline {\hbox {\textit  {Mr Emmanuel Hyon}}}\mathsurround \z@ $\relax  puisse avoir acc\IeC {\`e}s en temps r\IeC {\'e}el \IeC {\`a} mon code afin de m'orienter si je m'\IeC {\'e}carte du sujet. C'est donc \IeC {\`a} son initiative que nous avons utilis\IeC {\'e} \textit  {Github} tout au long de ce stage.}{5}{section*.8}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Dans les sections qui vont suivre nous allons expliciter diff\IeC {\'e}rents concepts propre aux mod\IeC {\`e}les stochastiques (notamment le principe m\IeC {\^e}me de la th\IeC {\'e}orie des jeux) mais aussi les outils utilis\IeC {\'e}s ; comment les installer et les utiliser. }{5}{section*.9}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}Pr\IeC {\'e}sentation de l'entreprise}{5}{section.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3}GitHub}{5}{section.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Github est un service d'h\IeC {\'e}bergement web (un peu comme une sorte de Drive) et de gestion de d\IeC {\'e}veloppement de logiciel lanc\IeC {\'e} en 2008. Ce dernier est cod\IeC {\'e} principalement en Ruby et Erlang par diff\IeC {\'e}rents programmeurs : Chris Wanstrath, PJ Hyett et Tom Preston-Werner.}{5}{section*.10}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Aujourd'hui cette plateforme compte plus de 15 millions d'utilisateurs et enregistre environ 40 millions de d\IeC {\'e}p\IeC {\^o}ts de fichiers, se pla\IeC {\c c}ant donc en t\IeC {\^e}te du plus grand h\IeC {\'e}bergeur source code mondial.}{5}{section*.11}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Le fonctionnement de Git est assez simple, on cr\IeC {\'e}er un r\IeC {\'e}pertoire (un r\IeC {\'e}f\IeC {\'e}rentiel / requisitory) dans lequel on va stocker tout les fichiers que l'on d\IeC {\'e}sire et on peut soit rendre l'acc\IeC {\`e}s publique (au quel cas tout le monde peut rejoindre et consulter ces fichiers) ou alors le restreindre en acc\IeC {\`e}s priv\IeC {\'e} (au quel cas c'est le cr\IeC {\'e}ateur qui d\IeC {\'e}cide quels seront les collaborateurs ayant droit de consultation des fichiers).}{5}{section*.12}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Ensuite cela s'agit comme une sorte de r\IeC {\'e}seau constitu\IeC {\'e} de branches (branch) o\IeC {\`u} chaque branches repr\IeC {\'e}sentent un collaborateur ainsi que la master qui correspond au cr\IeC {\'e}ateur du r\IeC {\'e}f\IeC {\'e}rentiel.}{6}{section*.13}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Une des caract\IeC {\'e}ristiques de Git repose sur le fait que c'est un outil de verisonning (gestion de version) est donc permet de si le fichier \IeC {\`a} \IeC {\'e}t\IeC {\'e} modifi\IeC {\'e}; si oui par qui et quand a eu lieu la modification et quel fichiers ont \IeC {\'e}t\IeC {\'e} affect\IeC {\'e}s. Cela permet notamment de pouvoir faire des travails de groupe sur le m\IeC {\^e}me sujet (un site ou une application par exemple) o\IeC {\`u} chacun doit travaill\IeC {\'e} sa partie mais n\IeC {\'e}cessite les parties des autres membres du groupes (mis \IeC {\`a} jours r\IeC {\'e}guli\IeC {\`e}rement). }{6}{section*.14}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{\IeC {\'E}videmment toutes les \IeC {\'e}tapes (initialisation, d\IeC {\'e}p\IeC {\^o}ts, fusion et clonage) se font a l'aide de lignes de commandes sur le terminal (en bash) que j'expliquerai un peu plus loin ainsi que les commandes principales pour chaque \IeC {\'e}tapes.}{6}{section*.15}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Initialisation}{6}{subsection.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Pour cr\IeC {\'e}er un projet il suffit d'aller sur le site https://github.com/ puis Repositories --> New et remplir les informations donn\IeC {\'e}es avant de valider. Ensuite pour initialiser le Git (et que la branch master existe; elle sera cr\IeC {\'e}e automatiquement a l'instantaciation du projet) il faut se placer dans le dossier (en ligne de commande cd) et tappez : git init}{6}{section*.16}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Ensuite il faudra taper : git remote add origin < lien donn\IeC {\'e}e par git hub > puis git push \IeC {\textendash }u origin master qui respectivement cr\IeC {\'e}erons le r\IeC {\'e}pertoire du projet et ensuite la zone de d\IeC {\'e}p\IeC {\^o}t.}{6}{section*.17}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Branches}{6}{subsection.3.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Comme nous l'avons dit plus haut le projet est contenu dans la branche principale la master et gr\IeC {\^a}ce \IeC {\`a} des copies de branches le projet acquiert une plus grande flexibilit\IeC {\'e} qui permet d'incr\IeC {\'e}menter au fur et mesure le projet.}{6}{section*.18}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour ajouter une branche il suffira simplement de taper git branch < nom de la branche > et pour supprimer une branche il faut rajouter l'option -d a la commande soit : git branch -d < nom de la branche >.}{6}{section*.19}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Pour changer de branche (afin d'effectuer un d\IeC {\'e}p\IeC {\^o}t ou autre) il faudra taper : git checkout < nom de la branche > et enfin pour visualiser l'ensemble des branches existantes on devra taper : git branch .}{6}{section*.20}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}D\IeC {\'e}p\IeC {\^o}t et mises \IeC {\`a} jours}{6}{subsection.3.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Avant toute chose il faut savoir sur quelle branche d\IeC {\'e}poser le fichier puis il faudra taper les commandes suivantes pour les ajouter au fichier : git add < nom des fichier > (ou * pour tout ajouter) puis git commit -m message et enfin pour finir git push origin < nom de la branche>.}{6}{section*.21}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour r\IeC {\'e}cup\IeC {\'e}rer des modifications faites sur le projet il suffit \IeC {\`a} l'inverse de taper : git pull origin master.}{7}{section*.22}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}Clonage}{7}{subsection.3.4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Une fois les autres branches (celles des diff\IeC {\'e}rents collaborateurs) cr\IeC {\'e}es il faut juste qu'il copie le lien du git pour pouvoir travailler dessus et effectuer les futurs d\IeC {\'e}p\IeC {\^o}ts. En premier lieu il faudra taper : git clone < lien du git > puis effectuer la commande git pull origin master pour r\IeC {\'e}cup\IeC {\'e}rer les fichiers de la branche master et enfin faire les commandes relatives au d\IeC {\'e}p\IeC {\^o}t (vu plus haut).}{7}{section*.23}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4}Python}{7}{section.4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Python est un langage de programmation \IeC {\`a} part enti\IeC {\`e}re dont la premi\IeC {\`e}re version fut d\IeC {\'e}veloppe par \textit  {Guido van Rossum} et lanc\IeC {\'e} en 1991. Ce langage est facile d'utilisation et ne poss\IeC {\`e}de pas forc\IeC {\'e}ment de syntaxe particuli\IeC {\`e}res seulement une indentation permettant au compilateur int\IeC {\'e}gr\IeC {\'e} de suivre les blocs d'instructions.}{7}{section*.24}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Ce langage permet donc une multitude de possibilit\IeC {\'e} de code mais aussi d'action puisqu'il existe des biblioth\IeC {\`e}ques d\IeC {\'e}j\IeC {\`a} impl\IeC {\'e}ment\IeC {\'e}s et il suffira seulement des les utiliser comme bon nous le semble (par exemple Matplotlib ou encore Networkx etc...). Malheureusement Python n'est pas le langage le plus rapide d'ex\IeC {\'e}cution contrairement au C ou C++ et Java mais il permet tout de m\IeC {\^e}me d'acc\IeC {\'e}der \IeC {\`a} des fonctionnalit\IeC {\'e}s que d'autres langages ne peuvent proposer.}{7}{section*.25}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Contrairement au C, Python admets des types sophistiqu\IeC {\'e}s suppl\IeC {\'e}mentaires tel que les \textit  {Listes}, les \textit  {Dictionnaires}, les \textit  {Sets} et les \textit  {Tuples}. Il en va de soit que les types primitifs sont aussi pr\IeC {\'e}sent \textit  {int,float,double,boolean etc..}. Mais le r\IeC {\'e}el avantage du langage repose sur le fait que l'on ne se soucie pas du type de retour d'une fonction ni de la d\IeC {\'e}claration du type du param\IeC {\`e}tre ainsi que le langage admet la possibilit\IeC {\'e} d'\IeC {\^e}tre orient\IeC {\'e} objet.}{7}{section*.26}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Python est un langage interpr\IeC {\'e}t\IeC {\'e} et donc n'a pas besoin de passer pas un compilateur comme GCC (GNU Complier Collection), tout se fait directement sur la console une fois l'environnement install\IeC {\'e}.}{7}{section*.27}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Quant \IeC {\`a} l'installation de Python, cette derni\IeC {\`e}re est assez simple; il suffit d'aller sur le site officiel et t\IeC {\'e}l\IeC {\'e}charger la version en question (aujourd'hui version 3.8.2) et ensuite de l'installer. Il existe diff\IeC {\'e}rentes m\IeC {\'e}thodes d'activation du langage, qui repr\IeC {\'e}sente chacune l'environnement de la machine (Windows, Mac OS ou encore Linux).}{7}{section*.28}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{A savoir que sur Mac Os et Linux, Python est d\IeC {\'e}j\IeC {\`a} pr\IeC {\'e}install\IeC {\'e} et il faudra peut \IeC {\^e}tre seulement mettre \IeC {\`a} jours la version qui pourrai \IeC {\^e}tre obsol\IeC {\`e}te ou d\IeC {\'e}pass\IeC {\'e}.}{7}{section*.29}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Installation de Python}{8}{subsection.4.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.1.1}M\IeC {\'e}thode packages}{8}{subsubsection.4.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour cela il faut allez t\IeC {\'e}l\IeC {\'e}charger les packages en question sur le site officiel de Python puis les interpr\IeC {\'e}ter c'est dire ouvrir la console (terminal python) et demander \IeC {\`a} python d'ex\IeC {\'e}cuter le fichier \textit  {.py} en question via la commande :}{8}{section*.30}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.1.2}M\IeC {\'e}thode module Pip}{8}{subsubsection.4.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Il s'agit d'une des m\IeC {\'e}thodes les plus simple, apr\IeC {\`e}s avoir t\IeC {\'e}l\IeC {\'e}charg\IeC {\'e} les packages Python sur le site, on installe tout les modules externes (pip , Django etc ...) que l'on pourrai avoir besoin d'utiliser par la suite via le terminal : }{8}{section*.31}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Un petit code Python}{8}{subsection.4.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour d\IeC {\'e}clarer une variable il suffit seulement de la nomm\IeC {\'e}, Python n'attend pas forcement le type de la variable; tout comme pour une fonction il n'attend pas le type de retour de la fonction.Ensuite pour les boucles et les conditions il suffit d'utiliser le mot cl\IeC {\'e} en question suivit de " : " et donnez les instructions de fa\IeC {\c c}on indenter}{8}{section*.32}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Rien de mieux qu'un petit code Python pour mieux comprendre la syntaxe et la facilit\IeC {\'e} d'utilisation du langage. Ainsi je vais vous pr\IeC {\'e}senter un code source de la fonction \textit  {Tri \IeC {\`a} bulles} :}{8}{section*.33}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Python et les objets}{8}{subsection.4.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Python permet aussi l'utilisation de l'orient\IeC {\'e} objet, c'est donc un des autres plus de ce langage puissant et aux vagues possibilit\IeC {\'e}. Dans cette partie nous allons vous montrer comment coder un objet en Python et aussi le construire. Nous allons donc voir la syntaxe g\IeC {\'e}n\IeC {\'e}rale d'une \textit  {Classe} et celle d'un \textit  {Constructeur}. Enfin pour terminer cela nous impl\IeC {\'e}menterons un objet "Pullover" avec diff\IeC {\'e}rents attributs et son propre constructeur.}{8}{section*.34}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.3.1}Cr\IeC {\'e}ation d'une Classe "Lambda" }{9}{subsubsection.4.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour d\IeC {\'e}clarer un objet il suffit simplement d'utiliser le mot Class suivit de ":" et ensuite d\IeC {\'e}clarer des variables ou autres instructions.}{9}{section*.35}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.3.2}Constructeur de la Classe "Lambda"}{9}{subsubsection.4.3.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour d\IeC {\'e}clarer le constructeur d'un objet il faut utiliser la m\IeC {\'e}thode \textit  {init()} au sein de la classe en passant en param\IeC {\`e}tre ceux de l'objet en question. La petite diff\IeC {\'e}rence par rapport \IeC {\`a} d'autres langages de programmation orient\IeC {\'e} objet (C++ ou Java) est l'utilisation du param\IeC {\`e}tre (mais aussi mot cl\IeC {\'e}) \textit  {self} au seins du constructeur. En r\IeC {\'e}alit\IeC {\'e} \textit  {self} n'est autre que la premi\IeC {\`e}re r\IeC {\'e}f\IeC {\'e}rence de l'instance de l'objet que l'on va cr\IeC {\'e}er. }{9}{section*.36}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.3.3}Exemple d'objet : Pullover}{9}{subsubsection.4.3.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Maintenant que nous avons une premi\IeC {\`e}re approche de la syntaxe objet essayons de mettre cela en application avec quelque chose de plus concret. Nous allons cr\IeC {\'e}er un "Pullover" avec comme attribut : une marque, une taille, un nom de mod\IeC {\`e}le, une couleur et un prix }{9}{section*.37}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {5}Gurobi}{10}{section.5}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{La plateforme Gurobi est un solveur math\IeC {\'e}matique autrement dit c'est une optimisation math\IeC {\'e}matique. Il traduit un probl\IeC {\`e}me commercial en un \IeC {\'e}nonc\IeC {\'e} math\IeC {\'e}matique. Gurobi \IeC {\`a} \IeC {\'e}t\IeC {\'e} ecrit pour prendre en consid\IeC {\'e}ration diff\IeC {\'e}rentes interfaces sous diff\IeC {\'e}rents langage : \textit  {C ,C++, Java, Python et R}.}{10}{section*.38}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Il y a deux m\IeC {\'e}thodes d'installation soit directement avec une licence (payante ou gratuite) ou alors avec un la distribution \textit  {Anaconda} que nous allons tenter d'expliquer.}{10}{section*.39}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}Installation de Gurobi}{10}{subsection.5.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {5.1.1}M\IeC {\'e}thode classique }{10}{subsubsection.5.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Il est aussi possible d'installer \textit  {Gurobi} directement sur la machine en gardant notre environnement configur\IeC {\'e} par nos propre soins puisque l'environnement Python a pens\IeC {\'e} cela lors de sa conception.}{10}{section*.40}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour cela il suffira d'installer \textit  {gurobipy} via le terminal Python en tappant la commande suivante :}{10}{section*.41}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {5.1.2}M\IeC {\'e}thode via Anaconda }{10}{subsubsection.5.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Via cette m\IeC {\'e}thode, l'environnement est d\IeC {\'e}j\IeC {\`a} pr\IeC {\'e}installer pour l'utilisateur et comporte une interface graphique \textit  {Spyder} ainsi qu'un \IeC {\'e}diteur de texte \textit  {Jupiter}}{10}{section*.42}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2}Test d'installation}{10}{subsection.5.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3}Exemple Gurobi programmation lin\IeC {\'e}aire (lp)}{10}{subsection.5.3}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {6}La th\IeC {\'e}orie des jeux}{11}{section.6}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Comme nous l'avons expliqu\IeC {\'e} un peu plus haut, l'un des objectifs de ce stage est la mod\IeC {\'e}lisation d'algorithmes afin de r\IeC {\'e}soudre des jeux stochastiques. Mais tout d'abord d\IeC {\'e}taillons un peu le concept des \textit  {jeux}.}{11}{definition.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pour int\IeC {\'e}grer et comprendre ce concept, il y a d'autres notions \IeC {\`a} connaitre telles que \textit  {jeux statiques} , \textit  {jeux dynamiques} , \textit  {strat\IeC {\'e}gie } ou encore \textit  {jeux bimatricel} et enfin \textit  {gains \IeC {\`a} somme nulle}.}{11}{section*.44}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.1}Jeux statiques et dynamiques}{11}{subsection.6.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Comme vous l'avez compris,un jeu n\IeC {\'e}cessite la pr\IeC {\'e}sence d'acteurs ; dans la suite de nos explications lorsque nous parlerons de \textit  {joueurs} nous ferons donc r\IeC {\'e}f\IeC {\'e}rence aux acteurs du jeu.}{11}{section*.45}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {6.1.1}Statiques}{11}{subsubsection.6.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Lorsque l'on parle de jeu statique il s'agit en r\IeC {\'e}alit\IeC {\'e} d'un jeu ou chaque joueur effectue une seule action en simultan\IeC {\'e} de l'autre mais sans avoir acc\IeC {\`e}s aux informations de l'action de l'autre joueurs.}{11}{section*.46}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {6.1.2}Dynamiques}{11}{subsubsection.6.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{A l'inverse, un jeu dynamique est un jeu qui se d\IeC {\'e}roule en plusieurs \IeC {\'e}tapes et non en simultan\IeC {\'e} ; c'est-\IeC {\`a}-dire que chacun des joueurs a connaissance de l'action de l'autre et donc peut \IeC {\'e}tablir une strat\IeC {\'e}gie avant chaque futures actions. }{12}{section*.47}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.2}Strat\IeC {\'e}gies}{12}{subsection.6.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{a definir}{12}{section*.48}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.3}Jeu bimatriciel}{12}{subsection.6.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Un jeu bimatriciel se caract\IeC {\'e}rise comme son nom l'indique par deux matrices. Ces derni\IeC {\`e}res ne sont autres que les gains des joueurs. Autrement dit les joueurs jouent de mani\IeC {\`e}re simultan\IeC {\'e} et on inscrit dans une matrice leurs gains (une matrice pour chaque joueur). Voici un exemple de deux matrices de gains pour deux joueurs A et B qui joue respectivement les lignes et les colonnes.}{12}{section*.49}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.4}Jeu \IeC {\`a} sommes nulles}{12}{subsection.6.4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Comme annonc\IeC {\'e} dans notre introduction nous essayerons de r\IeC {\'e}soudre des jeux a sommes nulles via des algorithmes que nous allons impl\IeC {\'e}menter par la suite. Mais qu'est ce qu'un jeu \IeC {\`a} somme nul ? }{12}{section*.50}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{eifheien}{12}{section*.51}\protected@file@percent }
\bibcite{Python}{Python}
\bibcite{GitHub}{GitHub}
\bibcite{Gurobi}{Gurobi}
\bibcite{RO}{Th\IeC {\'e}orie des Jeux}
\bibcite{RO}{Th\IeC {\'e}orie des Jeux}
\bibcite{RO}{Th\IeC {\'e}orie des Jeux}
\@writefile{toc}{\contentsline {section}{\numberline {7}Webographie}{13}{section.7}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {8}Annexes}{14}{section.8}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {A}Python en g\IeC {\'e}n\IeC {\'e}ral}{15}{appendix.A}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{La syntaxe est assez similaire aux autre langage puisque python utilise les m\IeC {\^e}mes types de variables, sauf les types sophistiqu\IeC {\'e}s. A la diff\IeC {\'e}rence des autres langages de programmation (C,,C++,Java,php) la fin d'une instruction se termine par un caract\IeC {\`e}re vide et non ; , avec python c'est l'indentation qui fait office d'instruction et donc de bloc de code.}{15}{section*.53}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {A.1} Structure Conditionelle If }{15}{subsection.A.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{La condition est suivi par : puis vient ensuite l'instruction \IeC {\`a} effectuer, si le test est v\IeC {\'e}rifi\IeC {\'e}, qu'il faudra indenter (d'un cran).}{15}{section*.54}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {A.2} Structure Conditionelle Else}{15}{subsection.A.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{La condition est suivi par : puis vient ensuite l'instruction \IeC {\`a} effectuer, si le premier test n'est pas v\IeC {\'e}rifi\IeC {\'e}, qu'il faudra indenter (d'un cran) au m\IeC {\^e}me niveau que le test If.}{15}{section*.55}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {A.3} Structure Conditionelle Elif }{15}{subsection.A.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{La condition est suivi par : puis vient ensuite l'instruction \IeC {\`a} effectuer, si le premier test n'est pas v\IeC {\'e}rifi\IeC {\'e}, qu'il faudra indenter (d'un cran) au m\IeC {\^e}me niveau que le test If.}{15}{section*.56}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {A.4} Boucle For}{15}{subsection.A.4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{La structure est compos\IeC {\'e} de for puis de deux valeurs \IeC {\'e}l\IeC {\'e}ment et sequence qui permette de suivre l'it\IeC {\'e}ration \IeC {\`a} effectuer. Le bloc est ex\IeC {\'e}cut\IeC {\'e} autant de fois de qu'il y a d' \IeC {\'e}l\IeC {\'e}ments dans la sequence et se termine par : .}{15}{section*.57}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {A.5} Boucle While }{16}{subsection.A.5}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{La structure est compos\IeC {\'e} de while puis de la condition qui permet d'effectuer un test. Le bloc est ex\IeC {\'e}cut\IeC {\'e} tant que la condition est v\IeC {\'e}rifi\IeC {\'e} et se termine par : }{16}{section*.58}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {A.6} Les fonctions}{16}{subsection.A.6}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Quant au fonction la d\IeC {\'e}finition se fait de mani\IeC {\`e}re tr\IeC {\`e}s simple il suffit d'utiliser le mot cl\IeC {\'e} def et cela est terminer, en python on ne prend pas en compte le type de retour d'une fonction comme en C, C++ ou en Java (int, void, double, float etc ...).}{16}{section*.59}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {B}L'orient\IeC {\'e} objet en Python}{16}{appendix.B}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Python est un langage r\IeC {\'e}solument orient\IeC {\'e} objet, ce qui signifie que le langage tout entier est construit autour de la notion d\IeC {\textquoteright }objets. Quasiment tous les types du langage String / Integer / Listes / Dictionnaires sont avant tout des objets tout comme les fonctions qui elles aussi sont des objets.}{16}{section*.60}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Pour cr\IeC {\'e}er une classe , donc un Objet il suffit d'utilise le mot cl\IeC {\'e} class suivit de : et ne pas oublier l'indentation.}{16}{section*.61}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Ensuite il faudra d\IeC {\'e}finir un constructeur qui permettra d'instancier les objets dont nous auront besoins, il faut donc utiliser la m\IeC {\'e}thode \textit  {init} au sein de la classe sans oublier le param\IeC {\`e}tre obligatoire (mot cl\IeC {\'e} de python) self. }{16}{section*.62}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Si l'on d\IeC {\'e}fini une classe vide c'est a dire ou pour le moment il n'y aucune action \IeC {\`a} effectuer il faut rajouter le mot cl\IeC {\'e} pass}{17}{section*.63}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Comme nous l'avons \IeC {\'e}galement vu ont une classe m\IeC {\`e}re peut h\IeC {\'e}rit\IeC {\'e} d'une autre et donc de ses attributs et de ses m\IeC {\'e}thodes. la syntaxe est simple, il suffit de mettre en paranth\IeC {\'e}se la classe m\IeC {\`e}re au moment de la d\IeC {\'e}claration de la classe fille. Voici un exemple avec < NomClasse > et < NomClasse2>}{17}{section*.64}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ A ce niveau on peut se demander comment Python g\IeC {\'e}re ces h\IeC {\'e}ritages. Lorsqu\IeC {\textquoteright }on tente d\IeC {\textquoteright }afficher le contenu d\IeC {\textquoteright }un attribut de donn\IeC {\'e}es ou d\IeC {\textquoteright }appeler une m\IeC {\'e}thode depuis un objet, Python va commencer par chercher si la variable ou la fonction correspondantes se trouvent dans la classe qui a cr\IeC {\'e}\IeC {\'e} l\IeC {\textquoteright }objet.}{17}{section*.65}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Si c\IeC {\textquoteright }est le cas, il va les utiliser. Si ce n\IeC {\textquoteright }est pas le cas, il va chercher dans la classe m\IeC {\`e}re de la classe de l\IeC {\textquoteright }objet si cette classe poss\IeC {\`e}de une classe m\IeC {\`e}re. Si il trouve ce qu\IeC {\textquoteright }il cherche, il utilisera cette variable ou fonction.}{17}{section*.66}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Si il ne trouve pas, il cherchera dans la classe m\IeC {\`e}re de la classe m\IeC {\`e}re si elle existe et ainsi de suite. Deux fonctions existent pour savoir si l'objet est seulemnent une instance d'une classe et pour savoir si la classe en question a eu recourt \IeC {\`a} de l'h\IeC {\'e}riatge : isinstance() et issubclass(). }{17}{section*.67}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {C}GitHub}{17}{appendix.C}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {D}Gurobi}{18}{appendix.D}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {E} CV}{19}{appendix.E}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Curriculum Vitae Avi ASSAYAG L3 MIAGE}}{19}{figure.1}\protected@file@percent }
\newlabel{LastPage}{{}{19}{}{page.19}{}}
\xdef\lastpage@lastpage{19}
\xdef\lastpage@lastpageHy{19}
